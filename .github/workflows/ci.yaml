name: Website Lint, Build, Deploy

on:
    push:
        branches:
            - master
            - dev
    pull_request:
    workflow_dispatch:
        inputs:
            deploy:
                description: "Deploy location"
                required: true
                default: "none"
                type: choice
                options:
                    - production
                    - staging
                    - none

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    lint:
        name: Lint
        runs-on: ubuntu-latest
        concurrency:
            group: ${{ github.workflow }}-lint-${{ github.ref }}
            cancel-in-progress: true

        steps:
            - name: Checkout 🛎
              uses: actions/checkout@master

            - name: Setup node env 🏗
              uses: actions/setup-node@v3.0.0
              with:
                  node-version: 18

            - name: Get yarn cache directory path 🛠
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"

            - name: Cache node_modules 📦
              uses: actions/cache@v3
              id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-

            - name: Install dependencies 👨🏻‍💻
              run: yarn

            - name: Run linter 👀
              run: yarn lint

            - name: Build App ⚙️
              run: yarn build

    post-lint:
        name: Post Lint
        runs-on: ubuntu-latest
        needs:
            - lint
        if: ${{ failure() }}

        steps:
            - name: Cancel current workflow run
              uses: actions/github-script@v6
              with:
                  script: |
                      github.actions.cancelWorkflowRun({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          run_id: context.runId
                      })

    build:
        name: Build and Test
        runs-on: self-hosted
        concurrency:
            group: ${{ github.workflow }}-build-${{ github.ref }}
            cancel-in-progress: true

        steps:
            - name: Checkout code
              uses: actions/checkout@v3
              with:
                  submodules: recursive

            - id: buildx-context
              run: |
                  docker context create builders

            - uses: docker/setup-buildx-action@v2
              id: buildx
              with:
                  install: true
                  endpoint: builders

            - name: Build docker image
              uses: docker/build-push-action@v3
              with:
                  context: .
                  cache-from: |
                      type=gha
                  cache-to: |
                      type=gha,mode=max
                  tags: |
                      website:${{ github.sha }}
                  build-args: |
                      "BUILDER=${{ github.actor }}"
                      "VERSION=${{ github.sha }}"
                  outputs: |
                      type=docker,dest=image.tar
                  target: final

            - name: Upload docker image
              uses: actions/upload-artifact@v3
              with:
                  name: docker-image
                  path: image.tar
                  retention-days: 3

    deploy:
        name: Deploy
        needs:
            - build
            - lint
        env:
            DEPLOY_PROD: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'production') || (github.event_name == 'push' && github.ref_type == 'branch' && github.ref_name == 'master') }}
            DEPLOY_STAGE: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'staging') || (github.event_name == 'push' && github.ref_type == 'branch' && github.ref_name == 'dev') || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'staged')) }}
        if: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy != 'none') || (github.event_name == 'push' && github.ref_type == 'branch' && (github.ref_name == 'master' || github.ref_name == 'dev')) || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'staged')) }}
        runs-on: self-hosted
        concurrency:
            group: ${{ github.workflow }}-deploy-${{ github.ref }}
            cancel-in-progress: true

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - id: buildx-context
              run: |
                  docker context create builders

            - uses: docker/setup-buildx-action@v2
              id: buildx
              with:
                  install: true
                  endpoint: builders

            - name: Download artifact
              uses: actions/download-artifact@v3
              with:
                  name: docker-image

            - name: Load image
              run: |
                  docker load --input image.tar
                  docker image ls -a

            - name: Log into Harbor Registry
              uses: docker/login-action@v2
              with:
                  registry: harbor.disembark.dev
                  username: robot$deploy-7tv
                  password: ${{ secrets.REGISTRY_TOKEN }}

            - name: Install kubectl
              uses: azure/setup-kubectl@v2.1

            - name: "[Production] Tag & Push docker images"
              if: ${{ env.DEPLOY_PROD == 'true' }}
              run: |
                  docker tag website:${{ github.sha }} harbor.disembark.dev/7tv/website:latest
                  docker tag website:${{ github.sha }} harbor.disembark.dev/7tv/website:${{ github.sha }}
                  docker push harbor.disembark.dev/7tv/website:latest
                  docker push harbor.disembark.dev/7tv/website:${{ github.sha }}

            - name: "[Production] Update deployment template"
              uses: danielr1996/envsubst-action@1.1.0
              if: ${{ env.DEPLOY_PROD == 'true' }}
              env:
                  IMAGE_TAG: ${{ github.sha }}
              with:
                  input: k8s/prod.template.yaml
                  output: k8s/prod.yaml

            - name: "[Production] Deploy to k8s"
              if: ${{ env.DEPLOY_PROD == 'true' }}
              env:
                  KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
              run: |
                  mkdir -p ~/.kube
                  (echo $KUBE_CONFIG_DATA | base64 -d) >> ~/.kube/config
                  kubectl config use-context autodeploy@SevenTV

                  kubectl apply -f k8s/prod.yaml

            - name: "[Staging] Tag & Push docker images"
              if: ${{ env.DEPLOY_STAGE == 'true' }}
              run: |
                  docker tag website:${{ github.sha }} harbor.disembark.dev/7tv-stage/website:latest
                  docker tag website:${{ github.sha }} harbor.disembark.dev/7tv-stage/website:${{ github.sha }}
                  docker push harbor.disembark.dev/7tv-stage/website:latest
                  docker push harbor.disembark.dev/7tv-stage/website:${{ github.sha }}

            - name: "[Staging] Update deployment template"
              uses: danielr1996/envsubst-action@1.1.0
              if: ${{ env.DEPLOY_STAGE == 'true' }}
              env:
                  IMAGE_TAG: ${{ github.sha }}
              with:
                  input: k8s/dev.template.yaml
                  output: k8s/dev.yaml

            - name: "[Staging] Deploy to k8s"
              if: ${{ env.DEPLOY_STAGE == 'true' }}
              env:
                  KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG_STAGE }}
              run: |
                  mkdir -p ~/.kube
                  (echo $KUBE_CONFIG_DATA | base64 -d) >> ~/.kube/config
                  kubectl config use-context autodeploy@SevenTV

                  kubectl apply -f k8s/dev.yaml
